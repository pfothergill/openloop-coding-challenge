[{"/Users/paul/openloop-coding-challenge/src/index.js":"1","/Users/paul/openloop-coding-challenge/src/App.js":"2"},{"size":218,"mtime":1607635876043,"results":"3","hashOfConfig":"4"},{"size":2905,"mtime":1607635835391,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"1pbrtjr",{"filePath":"9","messages":"10","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/paul/openloop-coding-challenge/src/index.js",[],["12","13"],"/Users/paul/openloop-coding-challenge/src/App.js",["14","15","16","17","18","19"],"import React, { useState, useEffect } from 'react';\nimport './index.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronRight, faChevronLeft, faCircle, faCheckCircle, faPlus } from '@fortawesome/free-solid-svg-icons';\n\nconst App = () => {\n\t// HINT: each \"item\" in our list names a name,\n\t// a boolean to tell if its been completed, and a quantity\n\tconst [items, setItems] = useState([]);\n\n\tconst [firstNameValue, setfirstNameValue] = useState('');\n\tconst [lastNameValue, setLastNameValue] = useState('')\n\tconst [emailValue, setEmailValue] = useState('')\n\tconst [noteValue, setNoteValue] = useState('')\n\tconst [totalItemCount, setTotalItemCount] = useState(6);\n\n\tconst handleAddButtonClick = () => {\n\t\tconst newItem = {\n\t\t\tfirstName: firstNameValue,\n\t\t\tlastName: lastNameValue,\n\t\t\temail: emailValue,\n\t\t\tnote: noteValue,\n\t\t\tisSelected: false,\n\t\t};\n\n\t\tconst newItems = [...items, newItem];\n\n\t\tsetItems(newItems);\n\t\tsetfirstNameValue('');\n\t\tsetLastNameValue('');\n\t\tsetEmailValue('');\n\t\tsetNoteValue('');\n\t};\n\n\tconst toggleComplete = (index) => {\n\t\tconst newItems = [...items];\n\n\t\tnewItems[index].isSelected = !newItems[index].isSelected;\n\n\t\tsetItems(newItems);\n\t};\n\n\treturn (\n\t\t<div class=\"mainView\">\n\t\t\t<div class=\"contentView\">\n\t\t\t\t<div class=\"title\">\n\t\t\t\t\t<h1>Add Users</h1>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"column\">\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\tFirst Name\n\t\t\t\t\t\t\t<input value={firstNameValue} onChange={(event) => setfirstNameValue(event.target.value)} placeholder='First Name...' />\n\t\t\t\t\t\t</label>\n\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\tLast Name\n\t\t\t\t\t\t\t<input value={lastNameValue} onChange={(event) => setLastNameValue(event.target.value)} placeholder='Last Name...' />\n\t\t\t\t\t\t</label>\n\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\tEmail\n\t\t\t\t\t\t\t<input value={emailValue} onChange={(event) => setEmailValue(event.target.value)} placeholder='Email...' />\n\t\t\t\t\t\t</label>\n\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\tNote\n\t\t\t\t\t\t\t<input value={noteValue} onChange={(event) => setNoteValue(event.target.value)} placeholder='Add a note...' />\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<FontAwesomeIcon icon={faPlus} onClick={() => handleAddButtonClick()} />\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"column\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{items.map((item, index) => (\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<div className='item-container'>\n\t\t\t\t\t\t\t\t<div className='item-name' onClick={() => toggleComplete(index)}>\n\t\t\t\t\t\t\t\t\t{item.isSelected ? (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faCheckCircle} />\n\t\t\t\t\t\t\t\t\t\t\t<span>{'  ' + item.firstName + ' ' + item.lastName + ' | ' + item.email + ' | ' + item.note}</span>\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t\t\t<span>{item.firstName + ' ' + item.lastName + ' | ' + item.email + ' | ' + item.note}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\">Remove</button>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n",{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":1,"column":27,"nodeType":"26","messageId":"27","endLine":1,"endColumn":36},{"ruleId":"24","severity":1,"message":"28","line":4,"column":10,"nodeType":"26","messageId":"27","endLine":4,"endColumn":24},{"ruleId":"24","severity":1,"message":"29","line":4,"column":26,"nodeType":"26","messageId":"27","endLine":4,"endColumn":39},{"ruleId":"24","severity":1,"message":"30","line":4,"column":41,"nodeType":"26","messageId":"27","endLine":4,"endColumn":49},{"ruleId":"24","severity":1,"message":"31","line":15,"column":9,"nodeType":"26","messageId":"27","endLine":15,"endColumn":23},{"ruleId":"24","severity":1,"message":"32","line":15,"column":25,"nodeType":"26","messageId":"27","endLine":15,"endColumn":42},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'faChevronRight' is defined but never used.","'faChevronLeft' is defined but never used.","'faCircle' is defined but never used.","'totalItemCount' is assigned a value but never used.","'setTotalItemCount' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]